{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0; //Type "WLSettings." below to open auto-completion and see extra settings you can set.
end;

type
  ERSNPC = (PHIALS, SERVANT);
  ERSLarder = (REGULAR_LARDER, OAK_LARDER);

var
  CurrentNPC: ERSNPC := PHIALS;
  CurrentLarder: ERSLarder := OAK_LARDER;

type
  EState = (
    LEVEL_UP,
    WAIT_STATE,

    EXIT_HOUSE,
    ENTER_HOUSE,

    BUILD_LARDER,
    HANDLE_FURNITURE_UI,
    DESTROY_LARDER,
    HANDLE_LARDER_CHAT,
    HANDLE_PIN,

    GET_PLANKS,
    HANDLE_PHIALS_CHAT,
    CALL_SERVANT,
    TALK_SERVANT,
    HANDLE_SERVANT,

    END_SCRIPT
  );

  TBuilder = record(TBaseWalkerScript)
    State: EState;
    POH: TRSWalker;

    BuiltLarder: TRSObject;
    LarderSpace: TRSObject;
    ServantNPC: TRSNPC;

    LarderIsBuilt: Boolean;
    UsePhials: Boolean;
    WaitingServant: Boolean;

    Plank: TRSItem;
    NotedPlanksSlot: Int32;
    MinInvCount: Int32;
  end;


procedure TBuilder.SetupNPC();
begin
  case CurrentNPC of
    PHIALS:
      Self.UsePhials := True;

    SERVANT:
      begin
        Self.UsePhials := False;

        Self.ServantNPC.SetupCommon();
        Self.ServantNPC.UpText := ['Talk-to'];
        Self.ServantNPC.Filter.Finder := False;
        Self.ServantNPC.Filter.MinimapDot := True;
      end;
  end;
end;

procedure TBuilder.SetupPlank();
begin
  case CurrentLarder of
    REGULAR_LARDER:
      begin
        Self.Plank := 'Self.Plank';
        Self.MinInvCount := 12;
      end;

    OAK_LARDER:
      begin
        Self.Plank := 'Oak Self.Plank';
        Self.MinInvCount := 11;
      end;
  end;
end;

procedure TBuilder.SetupObjects();
begin
  RSObjects.OakLarderBuilt.SetupCommon(1.5, 7, [[110, 86]]);
  RSObjects.OakLarderBuilt.WalkerIndex := 1;
  RSObjects.OakLarderBuilt.Filter.Finder := False;
  RSObjects.OakLarderBuilt.Filter.UpText := False;

  RSObjects.OakLarderSpace.SetupCommon(1.5, 7, [[110, 86]]);
  RSObjects.OakLarderSpace.WalkerIndex := 1;
  RSObjects.OakLarderSpace.Filter.Finder := False;
  RSObjects.OakLarderSpace.Filter.UpText := False;

  Self.BuiltLarder := RSObjects.OakLarderBuilt;
  Self.LarderSpace := RSObjects.OakLarderSpace;
end;

procedure TAntiban.Setup(); override;
begin
  inherited;

  Antiban.Skills := [ERSSkill.CONSTRUCTION, ERSSkill.TOTAL];
  Antiban.MinZoom := 1;
  Antiban.MaxZoom := 35;
end;

procedure TBuilder.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Self.Name := 'Larder Builder';

  inherited;

  Self.RSW.Setup(RIMMINGTON_MAP);
  Self.POH.Setup('POH');

  Self.SetupNPC();
  Self.SetupObjects();
  Self.SetupPlank();

  Self.ActionProfit -= (ItemData.GetAverage(Self.Plank) * 8 + 40);

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if CurrentNPC = PHIALS then
    case CurrentLarder of
      REGULAR_LARDER: Inventory.FindItem('noted Self.Plank', Self.NotedPlanksSlot);
      OAK_LARDER: Inventory.FindItem('noted Oak Self.Plank', Self.NotedPlanksSlot);
    end;

  if WLSettings.RemoteInput.ScriptDebug then
  begin
    DebugObjectArray += Self.BuiltLarder;
    DebugObjectArray += Self.LarderSpace;
    DebugObjectArray += RSObjects.POHPortal;
    DebugNPCArray += RSNPCs.Phials;
    DebugNPCArray += Self.ServantNPC;
  end;
end;


function TWaspObject._SelectHelper(Action: TStringArray): Boolean; override;
begin
  if ChooseOption.IsOpen() and ChooseOption.Select(Action) then
    Exit(True);

  if MainScreen.IsUpText(Action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := MainScreen.DidRedClick();
  end
  else
      Result := ChooseOption.Select(Action, MOUSE_LEFT, True, (False));
end;


function TBuilder.EnterHouse(): Boolean;
begin
  if RSObjects.POHPortal.WalkSelectOption(['Build', 'mode']) then
  begin
    Minimap.WaitMoving();
    Result := MainScreen.WaitLoadingPOH(10000);
  end;
end;

function TBuilder.BuildLarder(): Boolean;
begin
  if Self.LarderSpace.WalkSelectOption(['Build La']) then
  begin
    Minimap.WaitMoving();
    Result := WaitUntil(MainScreen.IsClassicOpen, 200, 5000);
  end
  else if ChooseOption.HasOption('Remove L') then
  begin
    ChooseOption.Close();
    Self.LarderIsBuilt := True;
  end;
end;

function TBuilder.DestroyLarder(): Boolean;
begin
  if Self.BuiltLarder.WalkSelectOption(['Remove L']) then
  begin
    Minimap.WaitMoving();
    Result := WaitUntil(Chat.GetChatTitle() = 'Really remove it?', 200, 3000);
  end
  else if ChooseOption.HasOption('Build La') then
  begin
    ChooseOption.Close();
    Self.LarderIsBuilt := False;
  end;
end;


function TBuilder.CallServant(): Boolean;
begin
  if Self.ServantNPC.Click() then
  begin
    Minimap.WaitMoving();
    Result := WaitUntil(Chat.GetChatTitle() = 'Repeat last task?',
                        SRL.TruncatedGauss(50, 1500), 5000);
  end
  else
    Result := Options.CallServant();
end;

function TBuilder.PhialsGetPlanks(): Boolean;
begin
  if not RSNPCs.Phials.Find and not Self.RSW.AtTile(RSNPCs.Phials.TileArray, 8) then
    Self.RSW.WebWalk(RSNPCs.Phials.TileArray, 15, 0.2);

  if (Inventory.SetSelectedSlot(Self.NotedPlanksSlot) and RSNPCs.Phials.Click) then
  begin
    Minimap.WaitFlag;
    Result := WaitUntil(Chat.GetChatTitle() = 'Select an Option', 100, 15000);
  end;
end;

function TBuilder.TalkServant(): Boolean;
begin
  if Self.ServantNPC.Click() then
  begin
    Minimap.WaitMoving();
    Result := WaitUntil(Inventory.IsFull(), 100, 5000);
  end;

  Self.WaitingServant := not Result;
end;


function TBuilder.HandleServant(): Boolean;
begin
  Result := Chat.ClickOption('Fetch', -1)
  if Result then
  begin
    Self.WaitingServant := True;
    WaitUntil(Chat.GetChatTitle() <> 'Repeat last task?', 200, 3000)
  end;
end;

function TBuilder.HandleLarderChat(): Boolean;
begin
  Keyboard.PressKey(VK_1);
  Result := WaitUntil(Chat.GetChatTitle() <> 'Really remove it?', 200, 3000);
  Self.LarderIsBuilt := not Result;
  Wait(100, 150);
end;

function TBuilder.HandleFurniture(): Boolean;
begin
  case CurrentLarder of
    REGULAR_LARDER: Keyboard.PressKey(VK_1);
    OAK_LARDER: Keyboard.PressKey(VK_2);
  end;

  Result := Self.LarderIsBuilt := WaitUntil(not MainScreen.IsClassicOpen, 100, 3000);
  if Result then
  begin
    Self.TotalActions += 1;
    WL.Activity.Restart();
    Wait(250, 300);
  end else
    MainScreen.CloseInterface();
end;


function TBuilder.GetState(): EState;
var
  S: String := Chat.GetChatTitle();
begin
  if WL.Activity.IsFinished() then
    Exit(END_SCRIPT);

  if Chat.LeveledUp() then
    Exit(EState.LEVEL_UP);

  if S.Contains('remove') then
    Exit(EState.HANDLE_LARDER_CHAT);

  if S.Contains('Select') then
    Exit(EState.HANDLE_PHIALS_CHAT);

  if S.Contains('Repeat') then
    Exit(EState.HANDLE_SERVANT);

  if MainScreen.IsClassicOpen() then
  begin
    if BankPin.IsOpen() then
      Exit(EState.HANDLE_PIN);
    Exit(EState.HANDLE_FURNITURE_UI);
  end;

  if not Minimap.InPOH then
  begin
    if not Self.UsePhials or Inventory.IsFull() then
      Exit(EState.ENTER_HOUSE);
    Exit(EState.GET_PLANKS);
  end;

  if Self.LarderIsBuilt then
    Exit(EState.DESTROY_LARDER);

  if Inventory.Count() > Self.MinInvCount then
  begin
    Self.WaitingServant := False;
    Exit(EState.BUILD_LARDER);
  end;

  if Self.UsePhials then
    Exit(EState.EXIT_HOUSE);

  if Self.WaitingServant then
  begin
    if Self.ServantNPC.Find() then
      Exit(EState.TALK_SERVANT);
    Exit(EState.WAIT_STATE);
  end;

  Exit(EState.CALL_SERVANT);
end;

procedure TBuilder.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug();
  Self.Init(MaxActions, MaxTime);

  repeat
    Self.State := Self.GetState();
    Self.SetAction(ToStr(Self.State));

    case Self.State of
      EState.LEVEL_UP: Chat.HandleLevelUp(True);

      EState.HANDLE_LARDER_CHAT: Self.HandleLarderChat();
      EState.HANDLE_PHIALS_CHAT: Keyboard.PressKey(VK_3);
      EState.HANDLE_FURNITURE_UI: Self.HandleFurniture();
      EState.HANDLE_SERVANT: Self.HandleServant();
      EState.HANDLE_PIN: if BankPin.Enter(Login.GetPlayerPin) then MainScreen.WaitLoadingPOH(10000);

      EState.CALL_SERVANT: Self.CallServant();
      EState.TALK_SERVANT: Self.TalkServant();
      EState.EXIT_HOUSE: Options.LeaveHouse();
      EState.GET_PLANKS: Self.PhialsGetPlanks();

      EState.ENTER_HOUSE: Self.EnterHouse();
      EState.BUILD_LARDER: Self.BuildLarder();
      EState.DESTROY_LARDER: Self.DestroyLarder();

      EState.WAIT_STATE: Wait(7000, 8000);

      END_SCRIPT: Break;
    end;

    Self.DoAntiban();
  until Self.ShouldStop();
end;

var
  Builder: TBuilder;

type
  TBuilderConfig = record(TScriptForm)
    NPCSelector: TLabeledCombobox;
    LarderSelector: TLabeledCombobox;
    BuilderInfo: TLabel;
    ImagePanel: TImage;
    Pic: TPicture;
  end;

procedure TBuilderConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);

  CurrentNPC := ERSNPC(Self.NPCSelector.Combobox.getItemIndex());
  CurrentLarder := ERSLarder(Self.LarderSelector.Combobox.getItemIndex());
end;

procedure TBuilderConfig.Setup(); override;
begin
  inherited;

  UpdateFormSize(Self.Form, 0, Self.Form.GetHeight() + 250);

  with Self.NPCSelector do
  begin
    Init(Self.SSPanel.Panel); 
    SetCaption('Method:');
    SetLeft(5);  
    SetTop(35);
    SetWidth(200);
    Combobox.setStyle(csDropDownList);
    AddItem('Phials');
    AddItem('Demon buttler');
    Combobox.setItemIndex(Ord(CurrentNPC));
  end;

  with Self.LarderSelector do
  begin
    Init(Self.SSPanel.Panel); 
    SetCaption('Larder:');
    SetLeft(Self.NPCSelector.GetLeft() + Self.NPCSelector.GetWidth() + 10);
    SetTop(Self.NPCSelector.GetTop());
    SetWidth(200);
    Combobox.setStyle(csDropDownList);
    AddItem('Regular');
    AddItem('Oak');
    Combobox.setItemIndex(Ord(CurrentLarder));
  end;

  with Self.BuilderInfo do
  begin
    Init(Self.SSPanel.Panel); 
    setParent(Self.SSPanel.Panel);

    SetCaption('For Phials method make sure you have noted planks with you.' +
               STR_NEW_LINE +
               'For Demon buttler make sure you previously asked him for 24 planks and' +
               STR_NEW_LINE +
               'you need to have money in the servant''s money bag.' +
               STR_NEW_LINE +
               'You need a decoration that has green grass and the following layout:');

    SetLeft(5);  
    SetTop(Self.NPCSelector.GetTop() + Self.NPCSelector.GetHeight() + 2);
  end;

  Self.Pic.Init();
  Self.Pic.LoadFromFile(IncludePath+'\WaspLib\docs\images\POH_layout.png');

  with Self.ImagePanel do
  begin
    Init(Self.SSPanel.Panel); 
    SetParent(Self.SSPanel.Panel);
    SetTop(Self.BuilderInfo.GetTop() + 65);
    SetLeft(Self.BuilderInfo.GetLeft() + 80);
    setWidth(195);
    SetHeight(194);
    setPicture(Self.Pic);
  end;


  Self.WLPanel.StartButton.setOnClick(@Self.StartScript);
end;

procedure TBuilderConfig.Run(); override;
begin
  Self.Setup();

  inherited;
end;

var
  BuilderConfig: TBuilderConfig;

begin
  {$IFDEF SCRIPT_GUI}
  Sync(@BuilderConfig.Run);
  {$ENDIF}
  Builder.Run(WLSettings.MaxActions, WLSettings.MaxTime); 
end.
