{$IFNDEF SCRIPT_CHAIN}
  {$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
  {$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0; //Type "WLSettings." below to open auto-completion and see extra settings you can set.
end;
{$ENDIF}

type
  ERSLocation = (HOSIDIUS, ROGUES_DEN);

const
  RawFood: TRSItemArray = [
    'Custom',
    'Meat',
    'Shrimps',
    'Chicken',
    'Rabbit',
    'Anchovies',
    'Sardine',
    'Herring',
    'Mackerel',
    'Trout',
    'Cod',
    'Pike',
    'Salmon',
    'Tuna',
    'Karambwan',
    'Rainbow fish',
    'Lobster',
    'Bass',
    'Swordfish',
    'Monkfish',
    'Shark',
    'Sea turtle',
    'Anglerfish',
    'Dark crab',
    'Manta ray'
  ];

var
  CurrentFood: TRSItem   := 'Shark';
  CurrentLocation := ERSLocation.ROGUES_DEN;

type
  ECookerState = (
    OPEN_BANK,
    WITHDRAW_ITEMS,
    DEPOSIT_ITEMS,

    OPEN_COLLECT,
    HANDLE_COLLECT,
    CLOSE_INTERFACE,

    DO_COOKING,
    HANDLE_MAKE,
    WAIT_COOKING,

    LEVEL_UP,
    CLOSE_CONTEXT,

    END_SCRIPT
  );

  TCooker = record(TBaseBankScript)
    State: ECookerState;

    Food: TRSItem;
    Ingredient: TRSBankWithdrawItem;
    Products: array of TRSBankDepositItem;

    CookingObj: TRSObject;

    Cooking: Boolean;
    UsingFire: Boolean;
  end;

function TRSMake.Select(Index: Int32; Quantity: Int32; UseKeyboard: Boolean = True): Boolean; override;
var
  Buttons: TRSButtonArray;
begin
  Buttons := Self.GetItemButtons();
  if Buttons <> [] then
    Result := Self.SelectHelper(Buttons[Index], Quantity, UseKeyboard);
end;


procedure TCooker.SetupItems();
var
  CookedPrefix: TStringArray;
  BurntFish: TStringArray;
begin
  Self.Food := CurrentFood;

  if ToStr(Self.Food).ToLower() = 'shark' then
    ItemFinder.Similarity := 0.9999;

  CookedPrefix := ['chicken', 'rabbit', 'meat', 'crab meat',
                   'karambwan', 'chompy', 'fishcake', 'jubbly', 'sweetcorn'];

  BurntFish := ['herring', 'mackerel', 'sardine', 'anchovies',
                'giant carp', 'trout', 'cod', 'pike', 'salmon', 'tuna', 'bass'];

  Self.Ingredient := [('Raw ' + ToStr(Self.Food).ToLower()), BANK_WITHDRAW_ALL, False];

  if CookedPrefix.Contains(LowerCase(Self.Food)) then
    Self.Products := [
      ['Cooked ' + ToStr(Self.Food).ToLower(), BANK_DEPOSIT_ALL],
      ['Burnt ' + ToStr(Self.Food).ToLower(), BANK_DEPOSIT_ALL]]
  else if BurntFish.Contains(LowerCase(Self.Food)) then
    Self.Products := [
      [Self.Food, BANK_DEPOSIT_ALL],
      ['Burnt fish', BANK_DEPOSIT_ALL]]
  else
    Self.Products := [
      [Self.Food, BANK_DEPOSIT_ALL],
      ['Burnt ' + ToStr(Self.Food).ToLower(), BANK_DEPOSIT_ALL]];

  Self.ActionProfit := (
    ItemData.GetAverage(Self.Products[0].Item) -
    ItemData.GetAverage(Self.Ingredient.Item)
  );
end;

procedure TCooker.SetupLocation();
begin
  case CurrentLocation of
    ERSLocation.HOSIDIUS:
      begin
        Self.RSW.Setup(HOSIDIUS_KITCHEN_MAP);
        Self.ScriptBank := RSObjects.HosidiusKitchenBank;
        Self.CookingObj := RSObjects.HosidiusKitchenOven;
      end;

    ERSLocation.ROGUES_DEN:
      begin
        Self.RSW.Setup(ROGUES_DEN_MAP);
        RSNPCs.EmeraldBenedict.Filter.Finder := False;
        Self.ScriptBanker := RSNPCs.EmeraldBenedict;

        RSObjects.EternalFire.Filter.Finder := False;
        RSObjects.EternalFire.Filter.UpText := False;
        Self.CookingObj := RSObjects.EternalFire;
      end;
  end;
end;

procedure TAntiban.Setup(); override;
begin
  inherited;
  Antiban.Skills := [ERSSkill.COOKING, ERSSkill.TOTAL];
  Antiban.MinZoom := 15;
  Antiban.MaxZoom := 60;
end;

procedure TCooker.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Self.Name := 'Cooker';

  inherited;

  Self.SetupItems();
  Self.SetupLocation();

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  if WLSettings.RemoteInput.ScriptDebug then
  begin
    case CurrentLocation of
      ERSLocation.HOSIDIUS:   DebugObjectArray += Self.ScriptBank;
      ERSLocation.ROGUES_DEN: DebugNPCArray += Self.ScriptBanker;
    end;
    DebugObjectArray += Self.CookingObj;
  end;
end;


function TCooker.HasProducts(): Boolean; overload;
var
  Product: TRSBankDepositItem;
  Slots: TIntegerArray;
begin
  for Product in Self.Products do
    if not Inventory.FindItem(Product.Item, Slots) then
      Exit(False);

  Result := True;
end;

function TCooker.OpenBank(): Boolean;
begin
  case CurrentLocation of
    ERSLocation.HOSIDIUS:   Result := Bank.WalkOpen(Self.ScriptBank);
    ERSLocation.ROGUES_DEN: Result := Bank.WalkOpen(Self.ScriptBanker);
  end;
end;

function TCooker.Withdraw(): Boolean;
var
  InvCount: Int32;
begin
  if Self.BankTab = -1 then
    Self.BankTab := Bank.FindItemTab(Self.Ingredient.Item);

  InvCount := Inventory.Count();
  if Result := Bank.WithdrawItem(Self.BankTab, Self.Ingredient, True) then
    WaitUntil(Inventory.Count() > InvCount, 100, 3000);

  if Self.BankEmpty := (not Result and not Bank.ContainsItem(Self.BankTab, Self.Ingredient)) then
    if Self.CollectEmpty and Self.CollectTimer.IsFinished() then
      Self.CollectEmpty := False;
end;

function TCooker.Deposit(): Boolean;
var
  InvCount: Int32 := Inventory.Count();
  Product: TRSBankDepositItem;
begin
  Self.TotalActions += InvCount;

  for Product in Self.Products do
  begin
    if not Bank.DepositItem(Self.BankTab, Product, True) then
      Exit(False);
    WaitUntil((InvCount > Inventory.Count()), 50, 2000);
    InvCount := Inventory.Count();
  end;

  Result := True;
end;


function TCooker.HandleCollectBox(): Boolean;
var
  Slots: TIntegerArray;
begin
  if CollectBox.FindItem(Self.Ingredient.Item, Slots) then
  begin
    if Result := Self.CollectEmpty := CollectBox.CollectToBank then
      WaitUntil(not CollectBox.FindItem(Self.Ingredient.Item, Slots), 100, 2000);
    Self.BankEmpty := not Self.CollectEmpty;
  end
  else
    Self.CollectEmpty := True;

  Self.CollectTimer.Restart();
end;


function TCooker.DoCooking(): Boolean;
begin
  if Self.CookingObj.WalkSelectOption(['Cook', 'Fire']) then
  begin
    Minimap.WaitPlayerMoving(300, 3000);
    Result := Make.IsOpen(4000);
  end;
end;

function TCooker.HandleMake(): Boolean;
var
  i: Int32 := 0;
begin
  if not Make.IsOpen() then //not sure if I can remove this.
    Exit;                 //it's probably not needed.

  if 'arambwan' in Self.Food then
    i := 1;

  Result := Self.Cooking := Make.Select(i, MAKE_QUANTITY_ALL, Antiban.BioDice());
  
  if Result then
    WaitUntil(not Make.IsOpen(), 100, 4000);  
end;

function TCooker.IsCooking(WaitTime: Int32 = 2500): Boolean;
var
  ItemCount: Int32 := Inventory.CountItem(Self.Ingredient.Item);
begin
  if ItemCount = 0 then Exit;

  if Result := WaitUntil(ItemCount > Inventory.CountItem(Self.Ingredient.Item), 100, WaitTime) then
    WL.Activity.Restart();
end;

function TCooker.WaitCooking(): Boolean;
begin
  Result := Self.Cooking := Self.IsCooking
end;


function TCooker.GetState(): ECookerState;
begin
  if WL.Activity.IsFinished() then
    Exit(ECookerState.END_SCRIPT);

  if ChooseOption.IsOpen() then
    Exit(ECookerState.CLOSE_CONTEXT);

  if XPBar.EarnedXP() then
    Exit(ECookerState.WAIT_COOKING);

  if Chat.LeveledUp() then
  begin
    Self.Cooking := False;
    Exit(ECookerState.LEVEL_UP);
  end;

  if Make.IsOpen() then
    Exit(ECookerState.HANDLE_MAKE);

  if MainScreen.HasInterface() then
  begin
    if Bank.IsOpen() then
    begin
      if Self.HasProducts() then
        Exit(ECookerState.DEPOSIT_ITEMS);

      if Self.BankEmpty or Inventory.ContainsItem(Self.Ingredient.Item) then
        Exit(ECookerState.CLOSE_INTERFACE);

      Exit(ECookerState.WITHDRAW_ITEMS);
    end;

    if CollectBox.IsOpen() then
    begin
      if Self.CollectEmpty or Inventory.ContainsItem(Self.Ingredient.Item) then
        Exit(ECookerState.CLOSE_INTERFACE);

      Exit(ECookerState.HANDLE_COLLECT);
    end;

    Exit(ECookerState.CLOSE_INTERFACE);
  end;

  if Inventory.ContainsItem(Self.Ingredient.Item) then
  begin
    if Self.Cooking then
      Exit(ECookerState.WAIT_COOKING);

    Exit(ECookerState.DO_COOKING);
  end;

  if Self.BankEmpty and Self.CollectEmpty then
    Exit(ECookerState.END_SCRIPT);

  if Self.BankEmpty then
    Exit(ECookerState.OPEN_COLLECT);

  Exit(ECookerState.OPEN_BANK);
end;

function TCooker.Terminate(): Boolean; override;
begin
  if inherited then
    for 0 to 5 do
      if Result := Bank.WithdrawItem(Self.BankTab, [Self.Products[0].Item, BANK_WITHDRAW_ALL, True], True) then
        Break;
end;

procedure TCooker.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug();
  Self.Init(MaxActions, MaxTime);

  repeat
    Self.State := Self.GetState();
    Self.SetAction(ToStr(Self.State));

    case Self.State of
      ECookerState.OPEN_BANK: Self.OpenBank();
      ECookerState.WITHDRAW_ITEMS: Self.Withdraw();
      ECookerState.DEPOSIT_ITEMS: Self.Deposit();

      ECookerState.OPEN_COLLECT: CollectBox.WalkOpen(Self.ScriptBank);
      ECookerState.HANDLE_COLLECT: Self.HandleCollectBox();
      ECookerState.CLOSE_INTERFACE: MainScreen.CloseInterface();

      ECookerState.LEVEL_UP: Chat.HandleLevelUp();
      ECookerState.DO_COOKING: Self.DoCooking();
      ECookerState.HANDLE_MAKE: Self.HandleMake();
      ECookerState.WAIT_COOKING: Self.WaitCooking();
      ECookerState.CLOSE_CONTEXT: ChooseOption.Close();

      ECookerState.END_SCRIPT: Break;
    end;

    Self.DoAntiban();
  until Self.ShouldStop();

  if not Self.Terminate() then
    TerminateScript('Cooker didn''t terminate properly. Stopping execution.');
end;

var
  Cooker: TCooker;

type
  TCookerConfig = record(TScriptForm)
    LocSelector: TLabeledCombobox;
    CustomFoodName: TLabeledEdit;
    FoodSelector: TLabeledCombobox;
  end;

procedure TCookerConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);

  CurrentLocation := ERSLocation(Self.LocSelector.Combobox.getItemIndex());
  if Self.FoodSelector.getText() = 'Custom' then
    CurrentFood := Self.CustomFoodName.getText()
  else
    CurrentFood := Self.FoodSelector.getText();
end;

{$H-}
procedure TCookerConfig.FoodSelectorOnChange(Sender: TObject);
begin
  Self.CustomFoodName.SetVisible(Self.FoodSelector.getText() = 'Custom');
end;
{$H+}

procedure TCookerConfig.Setup(); override;
var
  Str: String;
begin
  inherited;

  UpdateFormSize(Self.Form, 0, Self.Form.GetHeight() + 30);

  with Self.LocSelector do
  begin
    Init(Self.SSPanel.Panel); 
    SetCaption('Location:');
    SetLeft(5);  
    SetTop(35);
    SetWidth(200);
    SetStyle(csDropDownList);
    AddItem('Hosidius kitchen');
    AddItem('Rogues den');
    SetItemIndex(Ord(CurrentLocation));
  end;

  with Self.FoodSelector do
  begin
    Init(Self.SSPanel.Panel); 
    SetCaption('Food type:');
    SetLeft(Self.LocSelector.GetLeft() + Self.LocSelector.GetWidth() + 20);
    SetTop(Self.LocSelector.GetTop());
    SetWidth(200);
    SetStyle(csDropDownList);

    for Str in RawFood do
      AddItem(Str);

    SetItemIndex(0);
    Combobox.setOnChange(@Self.FoodSelectorOnChange);
  end;

  with Self.CustomFoodName do
  begin
    Init(Self.SSPanel.Panel); 
    SetCaption('Food name (must be the exact name):');
    SetLeft(Self.FoodSelector.GetLeft());
    SetTop(Self.LocSelector.GetTop() + Self.LocSelector.GetHeight() - 15);
    SetWidth(200);
    SetText(CurrentFood);
  end;

  Self.FoodSelectorOnChange(Self.FoodSelector.Combobox);

  Self.WLPanel.StartButton.setOnClick(@Self.StartScript);
end;

procedure TCookerConfig.Run(); override;
begin
  Self.Setup();

  inherited;
end;

var
  CookerConfig: TCookerConfig;

{$IFNDEF SCRIPT_CHAIN}
begin
  {$IFDEF SCRIPT_GUI}
  Sync(@CookerConfig.Run);
  {$ENDIF}
  Cooker.Run(WLSettings.MaxActions, WLSettings.MaxTime); 
end.
{$ENDIF}
