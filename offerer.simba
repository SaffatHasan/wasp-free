{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0; //Type "WLSettings." below to open auto-completion and see extra settings you can set.
end;

type
  ERSRemains = (
    FIENDISH_ASHES, VILE_ASHES, MALICIOUS_ASHES, ABYSSAL_ASHES, INFERNAL_ASHES,

    BABY_BONES, WYRM_BONES, DRAGON_BONES, WYVERN_BONES, DRAKE_BONES, LAVA_BONES,
    HYDRA_BONES, DAGANNOTH_BONES, SUPERIOR_BONES
  );

var
  CurrentRemains: ERSRemains := ERSRemains.MALICIOUS_ASHES;

type
  EOffererState = (
    OPEN_BANK,
    WITHDRAW_WRATH,
    WITHDRAW_ALT,
    WITHDRAW_REMAINS,

    OPEN_COLLECT,
    HANDLE_COLLECT,

    CLOSE_INTERFACE,

    OPEN_MAGIC,
    CAST_SPELL,
    WAIT_STATE,

    END_SCRIPT
  );

  TOfferer = record(TBaseBankScript)
    State: EOffererState;

    OfferSpell: ERSSpell;
    Remains: TRSItem;
    WrathRune: TRSItem;
    AltRune: TRSItem;

    RemainsLeft: Int32;
    SpellCooldown: TCountDown;
  end;

procedure TAntiban.Setup(); override;
begin
  inherited;

  Antiban.Skills := [ERSSkill.PRAYER, ERSSkill.TOTAL];
  Antiban.MinZoom := 10;
  Antiban.MaxZoom := 90;
end;


procedure TOfferer.SetupSpell();
begin
  Self.WrathRune := 'Wrath rune';

  Self.SpellCooldown.Setup(4800);

  case CurrentRemains of
    ERSRemains.FIENDISH_ASHES..ERSRemains.INFERNAL_ASHES:
      begin
        Self.OfferSpell := ERSSpell.DEMONIC_OFFERING;
        Self.AltRune := 'Soul rune';
      end;
    ERSRemains.BABY_BONES..ERSRemains.SUPERIOR_BONES:
      begin
        Self.OfferSpell := ERSSpell.SINISTER_OFFERING;
        Self.AltRune := 'Blood rune';
      end;
  end;
end;

procedure TOfferer.SetupRemains();
begin
  case CurrentRemains of
    ERSRemains.FIENDISH_ASHES:  Self.Remains := 'Fiendish ashes';
    ERSRemains.VILE_ASHES:      Self.Remains := 'Vile ashes';
    ERSRemains.MALICIOUS_ASHES: Self.Remains := 'Malicious ashes';
    ERSRemains.ABYSSAL_ASHES:   Self.Remains := 'Abyssal ashes';
    ERSRemains.INFERNAL_ASHES:  Self.Remains := 'Infernal ashes';
    ERSRemains.BABY_BONES:      Self.Remains := 'Babydragon bones';
    ERSRemains.WYRM_BONES:      Self.Remains := 'Wyrm bones';
    ERSRemains.DRAGON_BONES:    Self.Remains := 'Dragon bones';
    ERSRemains.WYVERN_BONES:    Self.Remains := 'Wyvern bones';
    ERSRemains.DRAKE_BONES:     Self.Remains := 'Drake bones';
    ERSRemains.LAVA_BONES:      Self.Remains := 'Lava dragon bones';
    ERSRemains.HYDRA_BONES:     Self.Remains := 'Hydra bones';
    ERSRemains.DAGANNOTH_BONES: Self.Remains := 'Dagannoth bones';
    ERSRemains.SUPERIOR_BONES:  Self.Remains := 'Superior dragon bones';
  end;

  Self.ActionProfit -= ((ItemData.GetAverage(Self.Remains) * 3) -
                    ItemData.GetAverage(Self.WrathRune) -
                    ItemData.GetAverage(Self.AltRune));
end;

procedure TOfferer.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Self.Name := 'Offerer';

  inherited;
  Self.SetupWLBanks();

  if WLSettings.RemoteInput.ScriptDebug then
    DebugObjectArray += Self.ScriptBank;

  Self.SetupSpell();
  Self.SetupRemains();

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();
end;


function TOfferer.CanCast(): Boolean;
begin
  if Inventory.IsOpen() then
    Result := Inventory.ContainsAll([Self.WrathRune, Self.AltRune])
  else if Magic.IsOpen() then
    Result := Magic.CanActivate(Self.OfferSpell)
  else
    Result := True;
end;

function TOfferer.CastSpell(): Boolean;
begin
  if Result := Magic.CastSpell(Self.OfferSpell) then
  begin
    Self.SpellCooldown.Restart(Random(-100,500));
    Self.RemainsLeft -= 3;
    Self.TotalActions += 1;
  end
  else if Inventory.Open() then
    Self.RemainsLeft := Inventory.CountItem(Self.Remains);
end;

function TOfferer.Withdraw(Item: TRSItem): Boolean;
var
  InvCount: Int32 := Inventory.Count();
begin
  if Result := Bank.WithdrawItem(Self.BankTab, [Item, BANK_WITHDRAW_ALL, False], True) then
    WaitUntil(Inventory.Count() > InvCount, 100, 3000);

  if Self.BankEmpty := (not Result and not Bank.ContainsItem(Self.BankTab, Item)) then
    if Self.CollectEmpty and Self.CollectTimer.IsFinished() then
      Self.CollectEmpty := False;
end;

function TOfferer.HandleCollectBox(): Boolean;
var
  Slots: TIntegerArray;
begin
  if CollectBox.FindItems([Self.WrathRune, Self.AltRune, Self.Remains], Slots) then
  begin
    if Result := Self.CollectEmpty := CollectBox.CollectToBank then
      WaitUntil(not CollectBox.FindItems([Self.WrathRune, Self.AltRune, Self.Remains], Slots), 50, 2000);
    Self.BankEmpty := not Self.CollectEmpty;
  end
  else
    Self.CollectEmpty := True;

  Self.CollectTimer.Restart();
end;

procedure TOfferer.WaitCoolDown();
begin
  case Random(0, 500) of
    0:
      begin
        if not WLSettings.Antiban.Chat then Exit
        else if (Random(20) <= 17) then Antiban.RandomChatButton
        else Antiban.RandomChatButtonState();
      end;

    1..5:
      begin
        if not WLSettings.Antiban.Camera then Exit
        else if (Random(10) <= 3) then Antiban.RandomRotate;
      end;

    6..10:
      begin
        if not WLSettings.Antiban.Mouse then Exit
        else if (Random(10) <= 3) then Antiban.RandomRightClick
        else Antiban.SmallRandomMouse();
      end;

    10, 14:
      begin
        if not WLSettings.Antiban.GameTabs then Exit
        else if (Random(10) <= 9) then Antiban.RandomTab
        else Antiban.CheckCharges();
      end;
    else
      Wait(100);
  end;
end;


function TOfferer.GetState(): EOffererState;
begin
  if WL.Activity.IsFinished() then
    Exit(EOffererState.END_SCRIPT);

  if MainScreen.HasInterface() then
  begin
    if Bank.IsOpen() then
    begin
      if not Inventory.ContainsItem(Self.WrathRune) then
        Exit(EOffererState.WITHDRAW_WRATH);
      if not Inventory.ContainsItem(Self.AltRune) then
        Exit(EOffererState.WITHDRAW_ALT);
      if (Inventory.CountItem(Self.Remains) < 3) then
        Exit(EOffererState.WITHDRAW_REMAINS);

      Self.RemainsLeft := Inventory.CountItem(Self.Remains);
    end;

    if CollectBox.IsOpen() and not Self.CollectEmpty then
      Exit(EOffererState.HANDLE_COLLECT);

    Exit(EOffererState.CLOSE_INTERFACE);
  end;

  if (Self.RemainsLeft < 3) or not Self.CanCast() then
  begin
    if not Self.BankEmpty then
      Exit(EOffererState.OPEN_BANK);
    if not Self.CollectEmpty then
      Exit(EOffererState.OPEN_COLLECT);

    Exit(EOffererState.END_SCRIPT);
  end;

  if Self.SpellCooldown.IsFinished() then
  begin
    if Magic.IsOpen() then
    begin
      if Magic.CanActivate(Self.OfferSpell) then
        Exit(EOffererState.CAST_SPELL)

      if not Self.BankEmpty then
        Exit(EOffererState.OPEN_BANK);

      if not Self.CollectEmpty then
        Exit(EOffererState.OPEN_COLLECT);

      Exit(EOffererState.END_SCRIPT);
    end;

    Exit(EOffererState.OPEN_MAGIC);
  end;

  Exit(EOffererState.WAIT_STATE);
end;

procedure TOfferer.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug();
  Self.Init(MaxActions, MaxTime);

  repeat
    Self.State := Self.GetState();
    Self.SetAction(ToStr(Self.State));
    Self.ExtraInfo := ' Spell: ' + ToStr(Self.OfferSpell) +
                 ' Self.RemainsLeft: ' + ToStr(Self.RemainsLeft) +
                 ' SpellCooldown.IsFinished(): ' + ToStr(Self.SpellCooldown.IsFinished());

    

    case Self.State of
      OPEN_BANK:        Bank.WalkOpen(Self.ScriptBank);
      WITHDRAW_WRATH:   Self.Withdraw(Self.WrathRune);
      WITHDRAW_ALT:     Self.Withdraw(Self.AltRune);
      WITHDRAW_REMAINS: Self.Withdraw(Self.Remains);

      OPEN_COLLECT:   CollectBox.WalkOpen(Self.ScriptBank);
      HANDLE_COLLECT: Self.HandleCollectBox();

      CLOSE_INTERFACE: MainScreen.CloseInterface();

      OPEN_MAGIC: Magic.Open();
      CAST_SPELL: Self.CastSpell();
      WAIT_STATE: Self.WaitCoolDown();

      END_SCRIPT: Break;
    end;

    Self.DoAntiban();
  until Self.ShouldStop();
end;

var
  Offerer: TOfferer;

type
  TOffererConfig = record(TScriptForm)
    RemainSelector: TLabeledCombobox;
  end;

procedure TOffererConfig.StartOfferer(Sender: TObject);
begin
  Self.Init(Sender);

  CurrentRemains := ERSRemains(Self.RemainSelector.Combobox.getItemIndex());
end;

procedure TOffererConfig.Setup(UseFood, UsePrayer, UseBank: Boolean); override;
begin
  inherited;

  with Self.RemainSelector do
  begin
    Init(Self.SSPanel.Panel); 
    SetCaption('Task:');
    SetLeft(15);  
    SetTop(35);
    SetWidth(200);
    Combobox.setStyle(csDropDownList);

    Combobox.getItems.Add('Fiendish ashes');
    Combobox.getItems.Add('Vile ashes');
    Combobox.getItems.Add('Malicious ashes');
    Combobox.getItems.Add('Abyssal ashes');
    Combobox.getItems.Add('Infernal ashes');
    Combobox.getItems.Add('Babydragon bones');
    Combobox.getItems.Add('Wyrm bones');
    Combobox.getItems.Add('Dragon bones');
    Combobox.getItems.Add('Wyvern bones');
    Combobox.getItems.Add('Drake bones');
    Combobox.getItems.Add('Lava dragon bones');
    Combobox.getItems.Add('Hydra bones');
    Combobox.getItems.Add('Dagannoth bones');
    Combobox.getItems.Add('Superior dragon bones');

    Combobox.setItemIndex(Ord(CurrentRemains));
  end;

  Self.WLPanel.StartButton.setOnClick(@Self.StartOfferer);
end;

procedure TOffererConfig.Run(); override;
begin
  Self.Setup(False, False, True);

  inherited;
end;

var
  Config: TOffererConfig;

begin
  {$IFDEF SCRIPT_GUI}
  Sync(@Config.Run);
  {$ENDIF}
  Offerer.Run(WLSettings.MaxActions, WLSettings.MaxTime); 
end.
