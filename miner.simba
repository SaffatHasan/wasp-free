{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0; //Type "WLSettings." below to open auto-completion and see extra settings you can set.
end;

type
  ERSBank = (
    POWER_MINE, VARROCK_E, VARROCK_W,
    CRAFTING_GUILD_MINE, MINE_GUILD
  );

  ERSRock = (
    CLAY, TIN, COPPER, IRON, SILVER, COAL, GOLD,
    MITHRIL, ADAMANTITE, RUNITE, AMETHYST
  );

var
  CurrentRock: ERSRock := ERSRock.TIN;
  BankLocation: ERSBank := ERSBank.VARROCK_W;

type
  EMinerState = (
    OPEN_BANK,
    DEPOSIT_ITEMS,
    CLOSE_INTERFACE,

    WALK_SPOT,
    WAIT_STATE,

    EQUIP_GEAR,
    LEVEL_UP,
    USE_SPEC,
    MINE_ROCK,

    DROP_ITEMS,

    END_SCRIPT
  );

  TMiner = record(TBaseBankScript)
    State: EMinerState;

    RSRock: TRSObject;

    ProspectorOutfit: TRSItemArray;
    BankList: TRSItemArray;
    DropList: TRSItemArray;

    Mining: Boolean;
    UseBank: Boolean;
    InvCount: Int32;
    PrevInvCount: Int32;
  end;

procedure TAntiban.Setup(); override;
begin
  inherited;

  Antiban.Skills := [ERSSkill.MINING, ERSSkill.TOTAL];
  Antiban.MinZoom := 30;
  Antiban.MaxZoom := 60;
end;


procedure TMiner.SetupRock();
begin
  case CurrentRock of
    ERSRock.CLAY:
      begin
        Self.RSRock := RSObjects.ClayRock;
        Self.ActionProfit := ItemData.GetAverage('Clay');
      end;

    ERSRock.TIN:
    begin
      Self.RSRock := RSObjects.TinRock;
      Self.ActionProfit := ItemData.GetAverage('Tin ore');
    end;

    ERSRock.COPPER:
      begin
        Self.RSRock := RSObjects.CopperRock;
        Self.ActionProfit := ItemData.GetAverage('Copper ore');
      end;

    ERSRock.IRON:
      begin
        Self.RSRock := RSObjects.IronRock;
        Self.ActionProfit := ItemData.GetAverage('Iron ore');
      end;

    ERSRock.SILVER:
      begin
        Self.RSRock := RSObjects.SilverRock;
        Self.ActionProfit := ItemData.GetAverage('Silver ore');
      end;

    ERSRock.COAL:
      begin
        Self.RSRock := RSObjects.CoalRock;
        Self.ActionProfit := ItemData.GetAverage('Coal');
      end;

    ERSRock.GOLD:
      begin
        Self.RSRock := RSObjects.GoldRock;
        Self.ActionProfit := ItemData.GetAverage('Gold ore');
      end;

    ERSRock.MITHRIL:
      begin
        Self.RSRock := RSObjects.MithrilRock;
        Self.ActionProfit := ItemData.GetAverage('Mithril ore');
      end;

    ERSRock.ADAMANTITE:
      begin
        Self.RSRock := RSObjects.AdamantiteRock;
        Self.ActionProfit := ItemData.GetAverage('Adamantite ore');
      end;

    ERSRock.RUNITE:
      begin
        Self.RSRock := RSObjects.RuniteRock;
        Self.ActionProfit := ItemData.GetAverage('Runite ore');
      end;

    ERSRock.AMETHYST:
      begin
        Self.RSRock := RSObjects.AmethystRock;
        Self.ActionProfit := ItemData.GetAverage('Amethyst');
      end;
  end;

  Self.RSRock.Filter.UpText := False;

  Self.DropList := [
    'Clay', 'Tin ore', 'Copper ore',
    'Iron ore', 'Silver ore', 'Gold ore', 'Uncut sapphire'
  ];

  Self.BankList := Self.DropList;

  Self.BankList += 'Uncut emerald';
  Self.BankList += 'Uncut ruby';
  Self.BankList += 'Uncut diamond';

  Self.BankList += 'Coal';
  Self.BankList += 'Mithril ore';
  Self.BankList += 'Adamantite ore';
  Self.BankList += 'Amethyst';
  Self.BankList += 'Unidentified minerals';

  Self.BankList += 'Clue geode (beginner)';
  Self.BankList += 'Clue geode (easy)';
  Self.BankList += 'Clue geode (medium)';
  Self.BankList += 'Clue geode (hard)';
  Self.BankList += 'Clue geode (elite)';

  Self.BankList += 'Clue scroll (beginner)';
  //Self.BankList += 'Clue scroll (easy)';
  //Self.BankList += 'Clue scroll (medium)';
  //Self.BankList += 'Clue scroll (hard)';
  //Self.BankList += 'Clue scroll (elite)';
  Self.BankList += 12073;
end;

procedure TMiner.SetupBank();
begin

  Self.RSRock.Filter.Walker := False;

  case BankLocation of
    MINE_GUILD:
      begin
        Self.RSW.Setup(MINING_GUILD_MAP);
        Self.ScriptBank := RSObjects.MiningGuildBank;
        Self.UseBank := True;
      end;

    CRAFTING_GUILD_MINE:
      begin
        Self.RSW.Setup(CRAFTING_GUILD_MAP);
        Self.ScriptBank := RSObjects.CraftGuildBank;
        Self.UseBank := True;
      end;

    VARROCK_E:
      begin
        Self.RSW.Setup(EAST_VARROCK_MAP);
        Self.ScriptBank := RSObjects.VarrockEastBank;
        Self.UseBank := True;
      end;

    VARROCK_W:
      begin
        Self.RSW.Setup(WEST_VARROCK_MAP);
        Self.ScriptBank := RSObjects.VarrockWestBank;
        Self.UseBank := True;
      end;

    POWER_MINE: Self.UseBank := False;
  end;
end;

procedure TMiner.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Self.Name := 'Miner';

  inherited;

  Self.SetupRock;
  Self.SetupBank;

  Self.ProspectorOutfit := [
    'Prospector helmet',
    'Prospector jacket',
    'Prospector legs',
    'Prospector boots',
    'Varrock armour 1',
    'Varrock armour 2',
    'Varrock armour 3',
    'Varrock armour 4',
    'Mining gloves',
    'Superior mining gloves',
    'Expert mining gloves',
    'Mining cape',
    'Mining cape(t)',
    'Elven signet',
    'Celestial ring',
    'Celestial signet'
  ];

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  Options.SetZoomLevel(40);

  if Antiban.BioDice() then
    Options.SetNPCAttackOption(ERSAttackOption.HIDDEN)
  else
    Options.SetNPCAttackOption(ERSAttackOption.ALWAYS_RIGHT_CLICK);

  if WLSettings.RemoteInput.ScriptDebug then
  begin
    DebugObjectArray += Self.ScriptBank;
    DebugObjectArray += Self.RSRock;
  end;
end;


function TMiner.MineRock(): Boolean;
begin
  Result := Self.Mining := Self.RSRock.Click() or Self.RSRock.WalkClick();
  if Result then
  begin
    Minimap.WaitPlayerMoving(300, 10000);
    Wait(1500, 2000);
  end;
end;

function TMiner.HasGear(): Boolean;
var
  Item: TRSItem;
begin
  for Item in Self.ProspectorOutfit do
    if Inventory.ContainsItem(Item) then
      Exit(True);

  Result := False;
end;

function TMiner.EquipGear(): Boolean;
var
  Item: TRSItem;
begin
  for Item in Self.ProspectorOutfit do
    if Inventory.ClickItem(Item) then
      Wait(200, 300);

  Result := not Self.HasGear();
end;


function TMiner.DropItems(): Boolean;
var
  InvCount: Int32 := 28;
begin
  Result := Inventory.ShiftDrop(Self.DropList, Inventory.RandomPattern);

  Self.TotalActions += (InvCount - Inventory.Count());

  if Result then
    WL.Activity.Restart();
end;

function TMiner.Deposit(): Boolean;
begin
  Result := Bank.DepositItemArray(Self.BankTab, Self.BankList, True);
  if Result then
    WL.Activity.Restart();
end;


function TMiner.IsMining(): Boolean;
begin
  Result := SRL.IsAnimating(MainScreen.GetPlayerBox, MainScreen.ConvertDistance(450), 350, 3);
end;

function TMiner.WaitMining(t: UInt32 = 3000): Boolean;
var
  GotXP: Boolean;
begin
  if Inventory.Count() <> Self.PrevInvCount then
  begin
    Self.Mining := False;
    Exit(False);
  end;

  Result := WaitUntil((Self.Mining := Self.IsMining()) or (GotXP := XPBar.EarnedXP()), 100, t);
  if GotXP then
    Result := Self.Mining := False;
end;


function TMiner.GetState(): EMinerState;
begin
  if WL.Activity.IsFinished() then
    Exit(EMinerState.END_SCRIPT);

  if Chat.LeveledUp() then
  begin
    Self.Mining := False;
    Exit(EMinerState.LEVEL_UP);
  end;

  if MainScreen.HasInterface() then
  begin
    if Bank.IsOpen() and Inventory.ContainsAny(Self.BankList) then
      Exit(EMinerState.DEPOSIT_ITEMS);
    Exit(EMinerState.CLOSE_INTERFACE);
  end;

  if Self.HasGear() then
    Exit(EMinerState.EQUIP_GEAR);

  if Inventory.IsFull() then
  begin
    Self.Mining := False;

    if not Self.UseBank then
      Exit(EMinerState.DROP_ITEMS);

    Exit(EMinerState.OPEN_BANK);
  end;

  if Self.Mining then
    Exit(EMinerState.WAIT_STATE);

  if Self.UseBank and not Self.RSW.AtTile(Self.RSRock.TileArray, 15) then
    Exit(EMinerState.WALK_SPOT);

  if Minimap.IsSpecWeapon() and (Minimap.GetSpecLevel() = 100) then
    Exit(EMinerState.USE_SPEC);

  Exit(EMinerState.MINE_ROCK);
end;

procedure TMiner.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug();
  Self.Init(MaxActions, MaxTime);

  repeat
    Self.State := Self.GetState();
    Self.ExtraInfo := ' Bank: ' + ToStr(Self.UseBank) + STR_NEW_LINE + ' Mining: ' + ToStr(Self.Mining);
    Self.SetAction(ToStr(Self.State));

    Self.InvCount := Inventory.Count();

    if Self.InvCount <> Self.PrevInvCount then
      WL.Activity.Restart();

    case Self.State of
      EMinerState.OPEN_BANK: Bank.WalkOpen(Self.ScriptBank);
      EMinerState.DEPOSIT_ITEMS: Self.Deposit();
      EMinerState.CLOSE_INTERFACE: MainScreen.CloseInterface();
      EMinerState.WALK_SPOT: Self.RSW.WebWalk(Self.RSRock.TileArray, 5, 0.2);
      EMinerState.WAIT_STATE: Self.WaitMining();
      EMinerState.LEVEL_UP: Chat.HandleLevelUp();
      EMinerState.EQUIP_GEAR: Self.EquipGear();
      EMinerState.USE_SPEC: Minimap.EnableSpec(100);
      EMinerState.MINE_ROCK: Self.MineRock();
      EMinerState.DROP_ITEMS: Self.DropItems();
      EMinerState.END_SCRIPT: Break;
    end;

    Self.PrevInvCount := Self.InvCount;

    Self.DoAntiban();
  until Self.ShouldStop();
end;

var
  Miner: TMiner;

function TRSBank.DepositItemArray(Tab: Int32; ItemArray: TRSItemArray; UseQuantityButtons: Boolean): Boolean; override;
var
  Item: TRSItem;
  ItemList: TRSItemArray;
begin
  for Item in ItemArray do
    if Inventory.ContainsItem(Item) then
      ItemList += Item;

  for Item in ItemList do
    Self.DepositItem(Tab, Item, UseQuantityButtons);

  Result := not Inventory.ContainsAny(ItemList);
end;



type
  TMinerConfig = record(TScriptForm)
    RockSelector: TLabeledCombobox;
    BankSelector: TLabeledCombobox;
  end;

procedure TMinerConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);

  CurrentRock := ERSRock(Self.RockSelector.Combobox.getItemIndex());

  case Self.BankSelector.Combobox.getText() of
    'Power mine (mine and drop)': BankLocation := ERSBank.POWER_MINE;
    'P2P Mining Guild':           BankLocation := ERSBank.MINE_GUILD;
    'Crafting guild':             BankLocation := ERSBank.CRAFTING_GUILD_MINE;
    'Varrock west':               BankLocation := ERSBank.VARROCK_W;
    'Varrock east':               BankLocation := ERSBank.VARROCK_E;
  end;
end;


procedure TMinerConfig.RockSelectorOnChange(Sender: TObject);
begin
  Writeln(Sender, ' has changed');

  Self.BankSelector.Clear;

  case ERSRock(Self.RockSelector.Combobox.getItemIndex()) of
    ERSRock.CLAY:
      begin
        Self.BankSelector.AddItem('Power mine (mine and drop)');
        Self.BankSelector.AddItem('Crafting guild');
        Self.BankSelector.AddItem('Varrock west');
      end;

    ERSRock.TIN:
      begin
        Self.BankSelector.AddItem('Power mine (mine and drop)');
        Self.BankSelector.AddItem('Varrock east');
        Self.BankSelector.AddItem('Varrock west');
      end;

    ERSRock.COPPER:
      begin
        Self.BankSelector.AddItem('Power mine (mine and drop)');
        Self.BankSelector.AddItem('Varrock east');
      end;

    ERSRock.IRON:
      begin
        Self.BankSelector.AddItem('Power mine (mine and drop)');
        Self.BankSelector.AddItem('P2P Mining Guild');
        Self.BankSelector.AddItem('Varrock east');
        Self.BankSelector.AddItem('Varrock west');
      end;

    ERSRock.SILVER:
      begin
        Self.BankSelector.AddItem('Power mine (mine and drop)');
        Self.BankSelector.AddItem('Crafting guild');
        Self.BankSelector.AddItem('Varrock west');
      end;

    ERSRock.GOLD:
      begin
        Self.BankSelector.AddItem('Power mine (mine and drop)');
        Self.BankSelector.AddItem('Crafting guild');
      end;

    else
      Self.BankSelector.AddItem('P2P Mining Guild');

  end;

  Self.BankSelector.SetItemIndex(0);
end;

procedure TMinerConfig.Setup(); override;
begin
  inherited;

  UpdateFormSize(Self.Form, Self.Form.GetWidth(), Self.Form.GetHeight() + 30);

  with Self.RockSelector do
  begin
    Init(Self.SSPanel.Panel);
    SetCaption('Rock type:');
    SetLeft(15);
    SetTop(35);
    SetWidth(200);
    Combobox.setStyle(csDropDownList);
    AddItem('Clay');
    AddItem('Tin');
    AddItem('Copper');
    AddItem('Iron');
    AddItem('Silver');
    AddItem('Coal');
    AddItem('Gold');
    AddItem('Mithril');
    AddItem('Adamantite');
    AddItem('Runite (doesn''t hop worlds)');
    AddItem('Amethyst');
    Combobox.setItemIndex(Ord(CurrentRock));
    Combobox.SetOnChange(@Self.RockSelectorOnChange);
  end;

  with Self.BankSelector do
  begin
    Init(Self.SSPanel.Panel);
    SetCaption('Bank location:');
    SetLeft(15);
    SetTop(Self.RockSelector.GetTop() + Self.RockSelector.GetHeight() - 5);
    SetWidth(Self.RockSelector.GetWidth());
    Combobox.setStyle(csDropDownList);
  end;

  Self.RockSelectorOnChange(Self.BankSelector.Combobox);
  Self.WLPanel.StartButton.setOnClick(@Self.StartScript);
end;

procedure TMinerConfig.Run(); override;
begin
  Self.Setup();

  inherited;
end;

var
  MinerConfig: TMinerConfig;

begin
  {$IFDEF SCRIPT_GUI}
    Sync(@MinerConfig.Run);
  {$ENDIF}
  Miner.Run(WLSettings.MaxActions, WLSettings.MaxTime); 
end.
