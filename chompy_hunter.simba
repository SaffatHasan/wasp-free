{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0; //Type "WLSettings." below to open auto-completion and see extra settings you can set.
end;

type
  EState = (
    WAIT_STATE,
    FILL_TOAD,
    FILL_BELLOWS,
    PLACE_TOAD,
    CLICK_CHOMPY
  );

  TChompyHunter = record(TBaseWalkerScript)
    State: EState;
    Toad: TRSNPC;
    OgreBellows: TRSItemArray;
    FillingBellows: Boolean;
  end;

procedure TAntiban.Setup(); override;
begin
  inherited;

  Antiban.Skills := [ERSSkill.TOTAL];
  Antiban.MinZoom := 5;
  Antiban.MaxZoom := 35;
end;

procedure TChompyHunter.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Self.Name := 'Chompy Hunter';

  inherited;

  ItemFinder.Similarity := 0.9999;
  Self.RSW.Setup(CASTLE_WARS_MAP);

  CombatHandler.Setup(@RSMonsters.Chompy, 2000);
  Self.Toad := RSNPCs.SwampToad;

  Self.OgreBellows := ['Ogre bellows (3)', 'Ogre bellows (2)', 'Ogre bellows (1)'];

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  Options.SetNPCAttackOption(ERSAttackOption.ALWAYS_LEFT_CLICK);

  if WLSettings.RemoteInput.ScriptDebug then
    DebugNPCArray += Self.Toad;
end;


function TChompyHunter.CountBellows(): Int32;
begin
  Result := Inventory.CountItem('Ogre bellows (3)') +
            Inventory.CountItem('Ogre bellows (2)') +
            Inventory.CountItem('Ogre bellows (1)');
end;

function TChompyHunter.FillBellows(): Boolean;
var
  InvCount: Int32 := Self.CountBellows();
  TempCount: Int32;
begin
  if RSObjects.SwampBubbles.WalkClick() then
  begin
    Minimap.WaitMoving();
    Result := WaitUntil(InvCount <> (TempCount := Self.CountBellows()), 100, 5000);
  end;


  if Result then
    while Inventory.ContainsItem('Ogre bellows') do
    begin
      InvCount := TempCount;
      if not WaitUntil(InvCount <> (TempCount := Self.CountBellows()), 100, 5000) then
        Break;
    end;
end;


function TChompyHunter.MoveAround(): Boolean;
var
  MinimapTPA: TPointArray;
  SwampTPA: TPointArray;
  P: TPoint;
  FinalTPA: TPointArray;
  MMDots: TPointArray;
begin
  MinimapTPA := Minimap.GetPolygon.Connect;
  MinimapTPA.Fill;
  MinimapTPA := MinimapTPA.Erode(3);

  SRL.FindColors(SwampTPA, CTS0(9083745, 0), Minimap.Bounds());

  MMDots := Minimap.GetDots(ERSMinimapDot.NPC).Offset(2, 2);
  MMDots := MMDots.Grow(2);

  SwampTPA := SwampTPA + MMDots;


  for P in MinimapTPA do
    if SwampTPA.Contains(P) then
      FinalTPA += P;

  Mouse.Click(FinalTPA.RandomValue(), MOUSE_LEFT);

  Minimap.WaitMoving();
  Result := not Minimap.HasDotUnder();
end;

function TChompyHunter.PlaceToad(): Boolean;
begin
  if Minimap.HasDotUnder() then
    Self.MoveAround();

  if Inventory.ClickItem('Bloated toad') then
  begin
    Wait(1400, 1800);
    Result := WaitUntil(not Inventory.ContainsItem('Bloated toad'), 100, 5000);
  end;
end;

function TChompyHunter.FillToad(): Boolean;
var
  InvCount := Inventory.Count();
begin
  if Self.Toad.Click(True, 10) then
  begin
    Minimap.WaitMoving();
    Result := WaitUntil(InvCount < Inventory.Count(), 100, 5000);
  end;

  if Result then
    Self.PlaceToad();
end;


function TChompyHunter.ClickedChompy(FeatherCount: Int32): Boolean;
begin
  Result := MainScreen.InCombat or (FeatherCount < Inventory.CountItemStack('Feather'));
end;

function TChompyHunter.ClickChompy(): Boolean;
var
  FeatherCount: Int32;
begin
  if CombatHandler.Monster^.SelectOption(['Attack', 'Pluck']) then
  begin
    FeatherCount := Inventory.CountItemStack('Feather');
    Minimap.WaitMoving();
    Result := WaitUntil(Self.ClickedChompy(FeatherCount) or MainScreen.InCombat, 100, 3000);
  end;

  if Result then
    Self.TotalActions += 1;
end;



function TChompyHunter.GetState(): EState;
begin
  if Self.FillingBellows then
  begin
    if Self.FillingBellows := Inventory.ContainsItem('Ogre bellows') then
      Exit(WAIT_STATE);

    Exit;
  end;

  if Inventory.ContainsItem('Bloated toad') then
    Exit(PLACE_TOAD);

  if MainScreen.InCombat then
    Exit(WAIT_STATE);

  if CombatHandler.Monster^.Find then
    Exit(CLICK_CHOMPY);

  if Inventory.ContainsAny(Self.OgreBellows) then
    Exit(FILL_TOAD);

  Exit(FILL_BELLOWS);
end;

procedure TChompyHunter.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug();
  Self.Init(MaxActions, MaxTime);

  repeat
    Self.State := Self.GetState();
    Self.SetAction(ToStr(Self.State));
    

    case Self.State of
      WAIT_STATE: Wait(800, 1200);
      FILL_TOAD: Self.FillToad();
      FILL_BELLOWS: Self.FillBellows();
      PLACE_TOAD: Self.PlaceToad();
      CLICK_CHOMPY: Self.ClickChompy();
    end;

    Self.DoAntiban();
  until Self.ShouldStop();
end;


var
  ChompyHunter: TChompyHunter;

function TRSMainScreen.InCombat(): Boolean; override;
begin
  if Self.FindDepletedHPBar then
    Exit(False);

  Result := (CombatHandler.IsSetup and not CombatHandler.InCombatTimer.IsFinished())
            or XPBar.EarnedXP() or (Self.FindHitsplats <> []);
end;

type
  TChompyHunterConfig = record(TScriptForm)
    ChompyHunterInfo: TLabel;
  end;

procedure TChompyHunterConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);
end;

procedure TChompyHunterConfig.Setup(); override;
begin
  inherited;

  with Self.ChompyHunterInfo do
  begin
    Init(Self.SSPanel.Panel); 
    setParent(Self.SSPanel.Panel);

    SetCaption('Have ogre bellows in your inventory and an ogre bow/arrows equipped.' +
               STR_NEW_LINE +
               'Start south of castle wars, in the middle pools close to the smoke dungeon.' +
               STR_NEW_LINE +
               'It''s probably a good idea to baby sit!');

    SetLeft(5);  
    SetTop(45);
  end;

  Self.WLPanel.StartButton.setOnClick(@Self.StartScript);
end;

procedure TChompyHunterConfig.Run(); override;
begin
  Self.Setup();

  inherited;
end;

var
  ChompyHunterConfig: TChompyHunterConfig;

{$IFNDEF SCRIPT_CHAIN}
begin
  {$IFDEF SCRIPT_GUI}
  Sync(@ChompyHunterConfig.Run);
  {$ENDIF}
  ChompyHunter.Run(WLSettings.MaxActions, WLSettings.MaxTime); 
end.
{$ENDIF}
